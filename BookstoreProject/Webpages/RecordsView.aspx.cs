using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.Configuration;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace BookstoreProject.Webpages
{
    public partial class RecordsView : System.Web.UI.Page
    {
        
        protected void Page_Load(object sender, EventArgs e)
        {
            

            HttpCookie c = Request.Cookies["userInfo"];
            if(c == null)
                Response.Redirect("~/Webpages/LoginPage.aspx");
            else
            {
                // Create SQL connection object
                MySqlConnection conn = new MySqlConnection();
                conn.ConnectionString = WebConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;

                // Create a SQL command Object
                MySqlCommand cmd = new MySqlCommand();
                cmd.Connection = conn;
                conn.Open();

                string cmdText = "select accesslevel from userinfo where username = '" + c["username"] + "'";

                cmd.CommandText = cmdText;

                MySqlDataReader reader = cmd.ExecuteReader();
                int accesslevel = 0;
                if (reader.Read())
                {
                    accesslevel = reader.GetInt32("accesslevel");
                }

                if (accesslevel == 0)
                {
                    Response.Redirect("~/Webpages/BrowseInventory.aspx");
                }
            }

                refreshTable();

        }

        protected void categoryChange(object sender, EventArgs e)
        {
            clearFilters();
            refreshTable();

            switch (ddlCategory.SelectedValue)
            {
                case "Books":
                    displayForBooks();
                    break;
                case "Authors":
                    displayForAuthors();
                    break;
                case "Suppliers":
                    displayForSuppliers();
                    break;
                case "Customers":
                    displayForCustomers();
                    break;
                case "Orders":
                    displayForOrders();
                    break;
            }

        }

        protected void refreshTable()
        {
            // Create SQL connection object
            MySqlConnection conn = new MySqlConnection();
            conn.ConnectionString = WebConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;

            // Create a SQL command Object
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;

            // Create SQL query based on selected category
            string cmdText = "";
            gvwData.AutoGenerateEditButton = true;
            gvwData.AutoGenerateDeleteButton = true;
            btnInsert.Visible = true;
            switch (ddlCategory.SelectedValue)
            {
                case "Books":
                    cmdText = queryBooks();
                    break;
                case "Authors":
                    cmdText = queryAuthors();
                    break;
                case "Suppliers":
                    cmdText = querySuppliers();
                    gvwData.AutoGenerateEditButton = false;
                    btnInsert.Visible = false;
                    break;
                case "Customers":
                    cmdText = queryCustomers();
                    break;
                case "Orders":
                    cmdText = queryOrders();
                    gvwData.AutoGenerateEditButton = false;
                    gvwData.AutoGenerateDeleteButton = false;
                    btnInsert.Visible = false;
                    break;
            }


            cmd.CommandText = cmdText;

            // Execute command
            conn.Open();
            MySqlDataReader reader = cmd.ExecuteReader();

            gvwData.DataSource = reader;
            gvwData.DataBind();
            conn.Close();

        }


        // Sets filter boxes and labels for browsing Books
        protected void displayForBooks()
        {
            lblF1.Text = "Title:";
            lblF1.Visible = true;
            tbxF1.Visible = true;

            lblF2.Text = "Author:";
            lblF2.Visible = true;
            tbxF2.Visible = true;

            lblF3.Text = "Supplier:";
            lblF3.Visible = true;
            tbxF3.Visible = true;
        }
        // Creates query for browsing Books
        protected string queryBooks()
        {
            // Start query for Books
            String cmd = "SELECT books.ISBN, books.Title, authors.`First Name`, authors.`Last Name`, books.Price, suppliers.`Supplier Name`, books.`Publication Date` FROM books INNER JOIN writtenby ON books.ISBN = writtenby.ISBN INNER JOIN authors ON writtenby.Author = authors.ID INNER JOIN suppliers ON books.Supplier = suppliers.ID";

            // add title filter 
            cmd += " WHERE lower(books.Title) LIKE '%" + tbxF1.Text.ToLower() + "%'";

            // add author filter
            cmd += " AND lower(authors.`First Name` + ' ' + authors.`Last Name`) LIKE '%" + tbxF2.Text.ToLower() + "%'";

            // add supplier filter
            cmd += " AND lower(suppliers.`Supplier Name`) LIKE '%" + tbxF3.Text.ToLower() + "%'";

            return cmd;
        }


        // Sets filter boxes and labels for browsing Authors
        protected void displayForAuthors()
        {
            lblF1.Text = "First Name:";
            lblF1.Visible = true;
            tbxF1.Visible = true;

            lblF2.Text = "Last Name:";
            lblF2.Visible = true;
            tbxF2.Visible = true;

            lblF3.Text = "";
            lblF3.Visible = false;
            tbxF3.Visible = false;

        }
        // Creates query for browsing Authors
        protected string queryAuthors()
        {
            // Start query for Authors
            String cmd = "SELECT authors.ID, `First Name`, `Last Name`, Gender, DOB FROM authors";

            // add first name filter
            cmd += " where lower(authors.`First Name`) LIKE '%" + tbxF1.Text.ToLower() + "%'";

            // add last name filter
            cmd += " AND lower(authors.`Last Name`) LIKE '%" + tbxF2.Text.ToLower() + "%'";


            return cmd;
        }


        // Sets filter boxes and labels for browsing Suppliers
        protected void displayForSuppliers()
        {
            lblF1.Text = "Supplier Name:";
            lblF1.Visible = true;
            tbxF1.Visible = true;

            lblF2.Text = "Representative";
            lblF2.Visible = true;
            tbxF2.Visible = true;

            lblF3.Text = "";
            lblF3.Visible = false;
            tbxF3.Visible = false;

        }
        // Creates query for browsing Suppliers
        protected string querySuppliers()
        {
            // Start query for Suppliers
            String cmd = "SELECT suppliers.ID, suppliers.`Supplier Name`, concat(supplierrepresentatives.`First Name`, ' ', supplierrepresentatives.`Last Name`) AS Representative FROM suppliers, supplierrepresentatives"; 
            
            // add table connections
            cmd += " WHERE suppliers.ID = supplierrepresentatives.`Works For`";

            // add first name filter
            cmd += " AND lower(suppliers.`Supplier Name`) LIKE '%" + tbxF1.Text.ToLower() + "%'";

            // add representative filter
            cmd += " AND lower(concat(supplierrepresentatives.`First Name`, ' ', supplierrepresentatives.`Last Name`)) LIKE '%" + tbxF2.Text + "%'";

            return cmd;
        }


        // Sets filter boxes and labels for browsing Customers
        protected void displayForCustomers()
        {
            lblF1.Text = "Name:";
            lblF1.Visible = true;
            tbxF1.Visible = true;

            lblF2.Text = "Phone:";
            lblF2.Visible = false;
            tbxF2.Visible = false;

            lblF3.Text = "";
            lblF3.Visible = false;
            tbxF3.Visible = false;

        }
        // Creates query for browsing Customers
        protected string queryCustomers()
        {
            // Start query for Customers
            String cmd = "SELECT customers.ID, concat(customers.`First Name`, ' ', customers.`Last Name`) AS Name FROM customers";
            
            // add table connections
            cmd += " ";

            // add name filter
            cmd += " where lower(concat(customers.`First Name`, ' ', customers.`Last Name`)) LIKE '%" + tbxF1.Text.ToLower() + "%'";
            //Removed phone filter due to phone number being potentially multi-value, causing formatting errors.
            //Potential fix could be to concat all phone numbers together separated by commas, but that might require changing the table and/or how these querybuilder functions work.
            // add phone filter
           // cmd += " AND lower(customerphones.`Phone Number`) LIKE '%" + tbxF2.Text.ToLower() + "%' Order by customers.id";

            return cmd;
        }


        // Sets filter boxes and labels for browsing Orders
        protected void displayForOrders()
        {
            lblF1.Text = "Customer Name:";
            lblF1.Visible = true;
            tbxF1.Visible = true;

            lblF2.Text = "";
            lblF2.Visible = false;
            tbxF2.Visible = false;

            lblF3.Text = "";
            lblF3.Visible = false;
            tbxF3.Visible = false;
        }
        // Creates query for browsing Orders
        protected string queryOrders()
        {
            // Start query for Orders
            String cmd = "SELECT orders.ID, orders.`Order Date`, orders.`Order Value`, concat(customers.`First Name`, ' ', customers.`Last Name`) AS Customer FROM orders, customers";

            // add table connections
            cmd += " WHERE orders.`Placed By` = customers.ID";

            // add name filter
            cmd += " AND lower(concat(customers.`First Name`, ' ', customers.`Last Name`)) LIKE '%" + tbxF1.Text.ToLower() + "%'";


            return cmd;
        }



        protected void btnRefresh(object sender, EventArgs e)
        {
            refreshTable();
        }

        protected void btnClearFilters(object sender, EventArgs e)
        {
            clearFilters();
        }

        protected void clearFilters()
        {
            tbxF1.Text = "";
            tbxF2.Text = "";
            tbxF3.Text = "";
            refreshTable();
        }

        protected void Row_Deleting(object sender, GridViewDeleteEventArgs e)
        {
            TableRow row = gvwData.Rows[e.RowIndex];
            string deleteID = row.Cells[1].Text;


            switch (ddlCategory.SelectedValue)
            {
                case "Books":
                    deleteFromBooks(deleteID);
                    break;
                case "Authors":
                    deleteFromAuthors(deleteID);
                    break;
                case "Suppliers":
                    deleteFromSuppliers(deleteID);
                    break;
                case "Customers":
                    deleteFromCustomers(deleteID);
                    break;
                case "Orders":
                    deleteFromOrders(deleteID);
                    break;
            }

            refreshTable();
        }

        void deleteFromCustomers(string ID)
        {
            // Create SQL connection object
            MySqlConnection conn = new MySqlConnection();
            conn.ConnectionString = WebConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;

            // Create a SQL command Object
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            conn.Open();

            string cmdText = "delete from Customers where ID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
            
            cmdText = "delete from customerAddress where CustContactID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from customerPhones where CustContactID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from customerEmail where CustContactID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "select id from orders where `placed by` = " + ID;
            cmd.CommandText = cmdText;
            MySqlDataReader reader = cmd.ExecuteReader();
            List<int> orderIDs = new List<int>();
            while (reader.Read())
            {
                orderIDs.Add(reader.GetInt32("ID"));
            }
            reader.Close();

            for(int i = 0; i < orderIDs.Count; i++)
            {
                cmdText = "delete from orderitems where `order number` = " + orderIDs[i];
                cmd.CommandText = cmdText;
                cmd.ExecuteNonQuery();
            }

            cmdText = "delete from orders where `placed by` = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from userinfo where customerid = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
            conn.Close();
        }

        void deleteFromBooks(string ID)
        {
            // Create SQL connection object
            MySqlConnection conn = new MySqlConnection();
            conn.ConnectionString = WebConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;

            // Create a SQL command Object
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            conn.Open();
            string cmdText = "delete from books where ISBN = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from writtenby where ISBN = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
            conn.Close();


        }

        void deleteFromAuthors(string ID)
        {
            // Create SQL connection object
            MySqlConnection conn = new MySqlConnection();
            conn.ConnectionString = WebConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;

            // Create a SQL command Object
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            conn.Open();


            string cmdText = "select ISBN from writtenby where author = " + ID;
            cmd.CommandText = cmdText;
            MySqlDataReader reader = cmd.ExecuteReader();
            List<int> bookIDs = new List<int>();
            
            //list of all books by author to be deleted
            while (reader.Read())
            {
                bookIDs.Add(reader.GetInt32("ID"));
            }
            reader.Close();

            //removes all books and orderitems of that book written by deleted author 
            for (int i = 0; i < bookIDs.Count; i++)
            {
                cmdText = "delete from books where isbn = " + bookIDs[i];
                cmd.CommandText = cmdText;
                cmd.ExecuteNonQuery();

                cmdText = "delete from orderItems where `item isbn` = " + bookIDs[i];
                cmd.CommandText = cmdText;
                cmd.ExecuteNonQuery();
            }
            
            cmdText = "delete from writtenby where author = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from AuthorAddress where AuthorContactID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from authorPhones where AuthorContactID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from authorEmails where AuthorContactID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
            conn.Close();

        }
        void deleteFromSuppliers(string ID)
        {
            // Create SQL connection object
            MySqlConnection conn = new MySqlConnection();
            conn.ConnectionString = WebConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;

            // Create a SQL command Object
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            conn.Open(); 
            string cmdText = "delete from supplierrepresentatives where `works for` = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from suppliers where ID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
            conn.Close();

        }

        void deleteFromOrders(string ID)
        {
            // Create SQL connection object
            MySqlConnection conn = new MySqlConnection();
            conn.ConnectionString = WebConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;

            // Create a SQL command Object
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            conn.Open();

            string cmdText = "delete from orderitems where `order number` = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();

            cmdText = "delete from orders where ID = " + ID;
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
            conn.Close();
        }

        protected void Row_Editing(object sender, GridViewEditEventArgs e)
        {
            TableRow row = gvwData.Rows[e.NewEditIndex];
            String editID = row.Cells[1].Text;

            Response.Redirect($"~/Webpages/RecordsUpdate.aspx?table={ddlCategory.SelectedValue}&mode=edit&id={editID}");
        }


        protected void btnInsert_Click(object sender, EventArgs e)
        {
            Response.Redirect($"~/Webpages/RecordsUpdate.aspx?table={ddlCategory.SelectedValue}&mode=insert");
        }

        protected void Row_CancelEdit(object sender, GridViewCancelEditEventArgs e)
        {


        }
    }
}